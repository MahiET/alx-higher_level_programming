
0x05. Python - Exceptions

Until now error messages havenâ€™t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.

Syntax Errors

Syntax errors, also known as parsing errors, are perhaps the most common kind of complaint you get while you are still learning Python:

while True print('Hello world')

  File "<stdin>", line 1

    while True print('Hello world')
                   ^
SyntaxError: invalid syntax


The error is caused by (or at least detected at) the token preceding the arrow: in the example, the error is detected at the function print(), since a colon (':') is missing before it. File name and line number are printed so you know where to look in case the input came from a script.

Exceptions

Errors detected during execution are called exceptions and are not unconditionally fatal: you will soon learn how to handle them in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:

10 * (1/0)

Traceback (most recent call last):

    File "<stdin>", line 1, in <module>

ZeroDivisionError: division by zero

4 + spam*3

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
  
NameError: name 'spam' is not defined

2' + 2
Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
  
TypeError: can only concatenate str (not "int") to str

Handling Exceptions

It is possible to write programs that handle selected exceptions. which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception.


 while True:
 
...     try:

...         x = int(input("Please enter a number: "))

...         break

...     except ValueError:

...         print("Oops!  That was no valid number.  Try again...")

 Raising Exceptions

The raise statement allows the programmer to force a specified exception to occur.

raise NameError('HiThere')

Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
  
NameError: HiThere

he sole argument to raise indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from Exception). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments